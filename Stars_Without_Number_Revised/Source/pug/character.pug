include constants.pug

input(type="hidden", name="attr_setting_super_type", value="psionics").super-type
input(type="hidden", name="attr_setting_foci_location", value="left").foci-loc
input(type="hidden", name="attr_setting_skill_query", value="hover").skills-query
input(type="hidden", name="attr_magic_type", value="arcanist").magic-type
input(type="hidden", name="attr_setting_ai_enable", value="").ai-setting
input(type="hidden", name="attr_setting_transhuman_enable", value="").transhuman-setting

//- Core
.core.core-info.cols-2
	.info.flex.core-box-text
		+text-input("character_name", "NAME").important
		+text-input("level", "LEVEL", "no-spinners")(type="number", min="1", value="1").level.center
		+text-input("class", "CLASS").level-rest.swn.wwn
		+text-input("background", "BACKGROUND").col25
		each val in core.swnInfo
			+text-input(val, val.toUpperCase()).col25.swn
		each val in core.wwnInfo
			+text-input(val, val.toUpperCase()).col25.wwn
		each val in ["first", "second", "third"]
			+text-input(`${val}_edge`, `${val.toUpperCase()}_EDGE`).col25.cwn
	.saves.core-box
		h3(data-i18n="SAVING_THROWS")
		.flex-between
			each val in saves
				if val === "luck"
					input(type="hidden", name="attr_homebrew_luck_save", value="0").hider
				+makeSave(val)
	.menus.core-box
		h3(data-i18n="INITIATIVE_FIXED")
		.menus-content.blue-button
			button(type="roll", name="roll_Initiative", data-i18n="INITIATIVE_FIXED", value="&{template:swn-default} {{charname=@{character_name}}} {{title=^{INITIATIVE_FIXED}}} {{ =[[1d8+@{dexterity_mod} &{tracker}]]}}").btn

//- Stats
.core.core-stats.cols-2
	.main.core-box-text
		h3(data-i18n="CORE_STATISTICS")
		.main-content
			+text-input-duo("HP", "HP_max", false, {value: "0"}).important
				.label
					button(type="roll", name="roll_HP", data-i18n="HIT_POINTS" value!="&{template:swn-default} {{charname=@{character_name}}} {{title=^{HIT_POINTS}}} {{=[[{abs(@{setting_heroic_enable}-1)*@{level}d6 + @{level}*@{constitution_mod}[CON] + @{level}*@{extra_hp_query}, abs(@{setting_heroic_enable}-1)*@{hp|max} + 1d1, 0d0 + @{setting_heroic_enable}*ceil(([[6*@{level}]] [Level] + [[@{level}*@{constitution_mod}]] [Con] + [[@{level}*@{extra_hp_query}]] [Bonus])/2)}kh1]]}} {{info=^{MAXIMUM_HP_1} @{level}d6 + @{level}&ast;[[@{constitution_mod}[CON] + @{extra_hp_query}]] ^{MAXIMUM_HP_2} [[@{hp|max} + 1]]}}").btn
			+text-input-duo("strain_permanent_extra", "cyberware_strain_total", "PERMANENT_STRAIN", {readonly: true, "data-i18n-title": "TOTAL_CYBERWARE_STRAIN"}, "", "+", "+")(type="number", min="0", value="0", data-i18n-title="PERMANENT_STRAIN_EXTRA").center
			input(type="hidden" name="attr_strain_above_max", value="0").strain-above-max
			+text-input-trio("strain_extra", "strain", "strain_max", "SYSTEM_STRAIN_/_MAX", {readonly: true, title: "Total Strain", "data-i18n-title": "TOTAL_STRAIN", class: "total-strain"}, {value: "10", readonly: true, "data-i18n-title": "CONSTITUTION"}, "", "=")(min="0", value="0", data-i18n-title="STRAIN_EXTRA", title: "Strain Extra") System Strain / Max
			+text-input-duo("xp", "xp_next", "XP_NEXT_LEVEL", {min: "0", value: "3"})(min="0", value="0")
			+text-input("AC", "ARMOR_CLASS")(type="number", value="10", readonly, data-i18n-title="AC_DESC").center
			+text-input("attack_bonus", "ATTACK_BONUS")(type="number", min="0", value="0").center
			input(type="hidden", name="attr_setting_heroic_enable", value="0").hider
			+text-input("hp_doom")(type="number").center
				button(type="roll", name="roll_Doom", data-i18n="DOOM_DAMAGE", data-i18n-title="DEFY_DOOM", value!="&{template:swn-default} {{charname=@{character_name}}} {{title=^{DEFYING_DOOM}}} {{^{DOOM_DAMAGE}=[[@{level}d@{doom_size}]]}}").btn
	.attributes.core-box
		table
			thead
				tr
					th
					each val in ["BASE", "BOOSTS", "ATTR"]
						th(data-i18n=val).edit
					th(data-i18n="ATTRIBUTE").display
					th(data-i18n="BONUS")
					th.edit
						span(data-i18n="MOD") Mod
					th(data-i18n="MODIFIER").display
			tbody
				input(type="hidden", name="attr_str_dex_mod", value="0")
				each attr in attributes
					tr
						td(data-i18n=attr.toUpperCase(), data-i18n-title=`${attr.toUpperCase()}_DESC`)
						td.edit
							if ["strength", "dexterity", "constitution"].includes(attr)
								input(type="number", name=`attr_${attr}_base`, value="0").ai-disabled.transhuman-disabled
							else
								input(type="number", name=`attr_${attr}_base`, value="0")
						td.edit
							if ["strength", "dexterity", "constitution"].includes(attr)
								input(type="number", name=`attr_${attr}_boosts`, value="0").ai-disabled.transhuman-disabled
							else
								input(type="number", name=`attr_${attr}_boosts`, value="0")
						td
							span(name=`attr_${attr}`)
						td
							input(type="number", name=`attr_${attr}_bonus`, value="0").edit
							span(name=`attr_${attr}_bonus`).display
						td.mod
							input(type="hidden", name=`attr_${attr}_mod`, value="0").add-plus
							span(name=`attr_${attr}_mod`)
	.resources.core-box-text
		.flex
			h3(data-i18n="RESOURCES")
			+text-input("credits", "CREDITS")(type="number", value="0").credits.center.col50
		fieldset.repeating_resources
			+text-input-duo("resource_count", "resource_count_max", "").display
				.label
					span(name="attr_resource_name")
			.flex-center.edit
				input(type="text", name="attr_resource_name")
				input(type="number", name="attr_resource_count")
				span.slash /
				input(type="number", name="attr_resource_count_max")

.column
	//- Weapons
	.section
		+sectionheader("show_weapons", "WEAPONS")
		.weapons
			input(type="hidden", name="attr_show_weapon_details", value="1").input-details
			fieldset.repeating_weapons
				input(type="hidden", name="attr_weapon_api", value="")
				input(type="hidden", name="attr_weapon_attack_display", value="")
				input(type="hidden", name="attr_weapon_damage_display", value="")
				button(type="roll", name="roll_Attack", value!="&{template:swn-attack} {{charname=@{character_name}}} {{title=@{weapon_name}}}  {{attack=[[1d20 + @{attack_bonus}[AB] + @{weapon_attack}[Weapon AB] + [[{{@{weapon_skill_bonus},-1}>0}*(@{weapon_skill_bonus}+2) - 2]][Skill] + @{weapon_attribute_mod}[Attribute] @{weapon_burst} @{modifier_query}]]}} {{damage=[[@{weapon_damage} + @{weapon_attribute_mod}[Attribute] + @{weapon_skill_to_damage}[Skill] @{weapon_burst}]]}} {{burst=[[0@{weapon_burst}]]}} @{weapon_shock} {{range=@{weapon_range}}} @{weapon_use_ammo} {{mod=[[0 @{modifier_query}]]}} {{desc=@{weapon_description}}} @{weapon_api}").invisible-button.display
				.display
					span.name.space-after
						span(name="attr_weapon_name").space-after
						span(name="attr_weapon_attack_display")
					span
						| (
						span(name="attr_weapon_damage_display")
						input(type="hidden", name="attr_weapon_range", value="").hide-empty
						span , #[span(data-i18n="RANGE")]:&nbsp;#[span(name="attr_weapon_range")]
						| )
					input(type="hidden", name="attr_weapon_use_ammo", value="0").hider
					span
						| . #[span(data-i18n="AMMO")]:&nbsp;
						input(type="number", name="attr_weapon_ammo").inline-input
						| &nbsp;/&nbsp;
						span(name="attr_weapon_ammo_max")
					.details
						span(name="attr_weapon_description")
				.edit.flex-wrap.grey-box-bordered
					+text-input("weapon_name", "NAME").grow.name
					+text-input("weapon_attack", "ATTACK_BONUS_SHORT")(type="number", value="0").ab.center
					+fake-text-input("SKILL").skills-either.weapon-skill.center
						select(name="attr_weapon_skill_bonus")
							each val in skills.combatRevised
								+combatSkillList(val,"shoot").swn
							each val in skills.combatSkills
								+combatSkillList(val, "shoot").wwn
							each val in skills.combatRevised
								+combatSkillList(val, "shoot").cwn
							each val in skills.combatsFirst
								+combatSkillList(`combat_${val}`).skills-first
							option.skills-psionics(value="@{skill_telekinesis}", data-i18n="TELEKINESIS")
							option.skills-magic(value="@{skill_sunblade}", data-i18n="SUNBLADE")
							option.skills-magic(value="@{skill_fight}", data-i18n="FIGHT")
							option(value="0", data-i18n="NONE")
					+text-input("weapon_skill_bonus", "SKILL_AB").weapon-skill.neither.center
					+fake-text-input("ATTRIBUTE").attribute.center
						select(name="attr_weapon_attribute_mod")
							each attr in attributes
								option(value=`@{${attr}_mod}`, data-i18n=`${attr.toUpperCase()}_SHORT`)
							option(value=`@{str_dex_mod}`, data-i18n=`STR_DEX`)
					+fake-text-input("BURST").burst.center
						select(name="attr_weapon_burst")
							option(value="", data-i18n="NO", selected)
							option(value="@{burst_query}", data-i18n="ASK")
							option(value="+ 2[Burst]", data-i18n="ALWAYS")
					+text-input("weapon_damage", "DAMAGE")(value="0").damage.grow.center
					+fake-text-input("+SKILL").skill-to-damage.center
						input(type="checkbox", name="attr_weapon_skill_to_damage", value="@{weapon_skill_bonus}")
					.text-input.shock-damage.center
						input(type="text", name="attr_weapon_shock_damage", value="0")
						label.label
							input(type="checkbox", name="attr_weapon_shock", value!="{{shock=[[@{weapon_shock_damage} + @{weapon_attribute_mod}[Attribute] + @{weapon_skill_to_damage}[Skill]]] ^{SHOCK_DAMAGE_AGAINST_AC_LEQ} @{weapon_shock_ac}!}}")
							span(data-i18n="SHOCK")
					+text-input("weapon_shock_ac", "SHOCK_AC")(type="number", value="10").shock-ac.center
					+text-input("weapon_range", "RANGE").range.grow.center
					+text-input-duo("weapon_ammo", "weapon_ammo_max", "", {value: "0"}).ammo.center
						label.label
							input(type="checkbox", name="attr_weapon_use_ammo", value!="{{ammo=[[0@{weapon_ammo} - (1 @{weapon_burst})]] / @{weapon_ammo|max}}}")
							span(data-i18n="AMMO")
					+text-input("weapon_encumbrance", "ENCUMBRANCE_SHORT")(type="number", value="0").enc.center
					.table-header.rep-grid.details
						.weapon-description(data-i18n="DESCRIPTION")
					textarea(name="attr_weapon_description").details

	//- Shells
	.section.ai-enabled.transhuman-enabled
		+sectionheader("show_shells", "SHELLS")
		.shells
			.grey-box
				.flex-center
					h3(data-i18n="SHELLS")
				.table-header.shells-grid.rep-grid.notdetails
					.active(data-i18n="ACTIVE?").notdetails
					.str(data-i18n="STRENGTH_SHORT").notdetails
					.dex(data-i18n="DEXTERITY_SHORT").notdetails
					.con(data-i18n="CONSTITUTION_SHORT").notdetails
					.affinity(data-i18n="AFFINITY?").notdetails
					.name(data-i18n="NAME").notdetails
				fieldset.repeating_shells
					.show-chevron
						+collapseChevron
						button.display.invisible-button(name="roll_Shell", type="roll", value!="&{template:swn-default} {{charname=@{character_name}}} {{info=^{SHELL} — STR @{shell_strength} - DEX @{shell_dexterity} - CON @{shell_constitution}}} {{title=@{shell_name}}} {{desc=^{BASIC_ABILITIES}:\n @{shell_ability} @{shell_affinity_active}}}")
						.table-header.shells-grid.rep-grid.details.no-highlight
							.active(data-i18n="ACTIVE?")
							.str(data-i18n="STRENGTH_SHORT")
							.dex(data-i18n="DEXTERITY_SHORT")
							.con(data-i18n="CONSTITUTION_SHORT")
							.affinity(data-i18n="AFFINITY?")
							.name(data-i18n="NAME")
						.shells-grid.rep-grid
							+fake-text-input().center
								input(type="checkbox", name="attr_shell_active", value="1").inline-input.rep-radio
							+text-input("shell_strength")(type="number", value="0").center.inline-input
							+text-input("shell_dexterity")(type="number", value="0").center.inline-input
							+text-input("shell_constitution")(type="number", value="0").center.inline-input
							+fake-text-input().center
								input(type="checkbox", name="attr_shell_affinity_active" value="\n\n^{AFFINITY_ABILITIES}:\n @{shell_affinity}").inline-input
							+text-input("shell_name").inline-input.edit
							+text-input("shell_name").display
						input(type="hidden", name="attr_shell_ability", value="").hide-empty
						.rep-grid.details
							.table-header
								.shell-ability(data-i18n="BASIC_ABILITIES")
							span(name="attr_shell_ability").display
							textarea(name="attr_shell_ability").edit
						.rep-grid.details
							.table-header
								.shell-affinity(data-i18n="AFFINITY_ABILITIES")
							span(name="attr_shell_affinity").display
							textarea(name="attr_shell_affinity").edit
	//- Foci
	.section.foci-left
		+foci
	//- Psionics and/or Space Magic
	.section.super
		+sectionheader("show_psionics", false)
			span(data-i18n="PSYCHIC_SKILLS_TECHNIQUES").super-psionics-only
			span(data-i18n="SPACE_MAGIC").super-magic-only
			span(data-i18n="PSIONICS_AND_SPACE_MAGIC").super-both
		div
			.tabs.flex.super-both
				label
					input(type="radio", name="attr_tab_super", value="magic")
					span(data-i18n="SPACE_MAGIC")
				label
					input(type="radio", name="attr_tab_super", value="psionics", checked)
					span(data-i18n="PSYCHIC_SKILLS_TECHNIQUES")
			input(type="hidden", name="attr_tab_super", value="psionics").tab-input
			.psionics
				.skills-psionic.skill-container(data-i18n-list="SKILL_ORDER_PSIONIC")
					each skill in skills.psionic
						+makeSkill(skill)
				.skills-repeating
					fieldset.repeating_psychic-skills
						+makeSkill("", true)
				.skills-psionic.skill-container
					.skill.skill-points
						.display.flex-center
							span(data-i18n="UNSPENT_PSIONIC_SKILL_POINTS").name
							span(name="attr_unspent_psionic_skill_points").level
						.edit.flex-center
							span(data-i18n="UNSPENT_PSIONIC_SKILL_POINTS").name
							input(type="number", min="0", value="0", name="attr_unspent_psionic_skill_points").level
				.psionics-effort.grey-box
					h3(data-i18n="COMMITTED_EFFORT")
					+text-input("psionics_extra_effort", "BONUS")(type="number", value="0").center
					each val in ["current", "scene", "day"]
						+text-input(`psionics_committed_effort_${val}`, `${val.toUpperCase()}`)(type="number", value="0", min="0").center
					+text-input("psionics_total_effort", "UNCOMMITTED")(type="number", value="1", readonly, data-i18n-title="MAXIMUM_EFFORT_DESC").center
				.techniques.grey-box.simple-repsection
					.flex-center
						h3(data-i18n="PSYCHIC_TECHNIQUES")
					input(type="hidden", name="attr_show_technique_details", value="1").input-details
					fieldset.repeating_techniques
						.show-chevron
							+collapseChevron()
							button.display.invisible-button(name="roll_Technique", type="roll", value!="&{template:swn-default} {{charname=@{character_name}}} {{info=^{PSYCHIC_TECHNIQUE} — @{technique_discipline}}} {{title=@{technique_name}}} {{desc=@{technique_description}}}")
							.display
								.name.flex
									span(name="attr_technique_name")
									span.discipline(name="attr_technique_discipline")
								.details #[span(name="attr_technique_description")]
							.edit.flex-wrap
								input.name.grow(type="text", name="attr_technique_name", data-i18n-placeholder="TECHNIQUE")
								input.discipline(type="text", name="attr_technique_discipline", data-i18n-placeholder="DISCIPLINE")
								textarea.details(name="attr_technique_description", data-i18n-placeholder="DESCRIPTION")
			.magic
				.skill-container
					+makeSkill("know_magic")
					+makeSkill("use_magic")
					+makeSkill("sunblade")
					+makeSkill("fight")
					input(type="hidden", name="attr_skill_magic2_name", value="").empty-hider
					+makeSkill("magic2", true)
				.skills-repeating
					fieldset.repeating_magic-skills
						+makeSkill("", true)
				h3(data-i18n="TYPE_OF_MAGIC")
				select(name="attr_magic_type")
					each val in ["arcanist", "magister", "adept"]
						option(value=val data-i18n=val.toUpperCase())
				.adept
					.magic-effort.grey-box
						h3(data-i18n="MAGIC_EFFORT")
						+text-input("magic_total_effort", "TOTAL")(type="number", value="0", min="0").center
						each val in ["current", "scene", "day"]
							+text-input(`magic_committed_effort_${val}`, `${val.toUpperCase()}`)(type="number", value="0", min="0").center
						+text-input("magic_uncommitted_effort", "UNCOMMITTED")(type="number", value="1", readonly).center
					.spells.grey-box.simple-repsection
						.flex-center
							h3(data-i18n="ABILITIES")
						.flex.edit
							.name(data-i18n="NAME")
						fieldset.repeating_abilities
							.show-chevron
								+collapseChevron
								button.display.invisible-button(type="roll", name="roll_Ability", value!="&{template:swn-default} {{charname=@{character_name}}} {{title=@{ability_name}}} {{info=^{ABILITY}}} {{desc=@{ability_description}}}")
								.display
									.name.flex-center
										span(name="attr_ability_name")
									.details #[span(name="attr_ability_description")]
								.edit.flex-wrap
									input.name(type="text", name="attr_ability_name")
									textarea.details(name="attr_ability_description")
				.spellcaster
					.spell-slots.grey-box
						h3(data-i18n="SPELL_SLOTS")
						each val in ["first", "second", "third", "fourth", "fifth"]
							+text-input(`spell-slots-${val}-level`, `${val.toUpperCase()}_LEVEL`)(type="number", value="0", min="0").center
					.spells.grey-box.simple-repsection
						.flex-center
							h3(data-i18n="SPELLS")
						.flex.edit
							.name(data-i18n="NAME")
							.level(data-i18n="LEVEL")
							.prepared.arcanist(data-i18n="PREPARED")
							.damage(data-i18n="DAMAGE")
						fieldset.repeating_spells
							.show-chevron
								+collapseChevron
								button.display.invisible-button(type="roll", name="roll_Spell", value!="&{template:swn-default} {{charname=@{character_name}}} {{title=@{spell_name}}} {{info=^{SPELL}}} {{desc=@{spell_description}}} {{damage=[[@{spell_damage}]]}}")
								.display
									.name.flex-center
										span(name="attr_spell_name")
										span(name="attr_spell_level")
										span.prepared.arcanist #[span(data-i18n="PREPARED")]:
										input.prepared.arcanist(type="number", name="attr_spell_prepared", value="0", min="0")
									.details #[span(name="attr_spell_description")]
								.edit.flex-wrap
									input.name(type="text", name="attr_spell_name")
									input.level(type="number", name="attr_spell_level", value="0", min="0")
									input.prepared.arcanist(type="number", name="attr_spell_prepared", value="0", min="0")
									input.damage(type="text", name="attr_spell_damage", value="0")
									textarea.details(name="attr_spell_description")


.column
	//- Skills
	.section
		input(type="hidden" vale="attr_skills")
		+sectionheader("show_skills", "SKILLS")
		.skills
			input(type="hidden", name="attr_homebrew_skill_list", value="revised").skills-type
			.swn.skill-container(data-i18n-list="SKILL_ORDER_REVISED")
				each skill in skills.revised
					+makeSkill(skill)
			.wwn.skill-container(data-i18n-list="SKILL_ORDER_WWN")
				each skill in skills.wwn
					+makeSkill(skill, !!customSkills[skill], customSkills[skill])
			.cwn.skill-container(data-i18n-list="SKILL_ORDER_CWN")
				each skill in skills.cwn
					+makeSkill(skill, !!customSkills[skill], customSkills[skill])
			input(type="hidden", name="attr_homebrew_extra_skills", value="0").hider
			.skills-repeating
				fieldset.repeating_skills
					+makeSkill("", true)
			.skill-container
				+unspentSkillPoints()
			.skill-blurb.edit(data-i18n="SKILL_BLURB")
			

	//- Foci
	.section.foci-right
		+foci

//- AI
.section.cols-2.ai-enabled
	+sectionheader("show_ai", "AI")
	.ai.halfgrid
		.column
			.grey-box.ai-processing
				h3(data-i18n="COMMITTED_PROCESSING")
				+text-input("ai_extra_processing", "BONUS")(type="number", value="0").center
				+text-input("ai_committed_processing_current", "CURRENT")(type="number", value="0", min="0").center
				+text-input("ai_committed_processing_scene", "SCENE")(type="number", value="0", min="0").center
				+text-input("ai_committed_processing_day", "DAY")(type="number", value="0", min="0").center
				+text-input("ai_total_processing", "UNCOMMITTED")(type="number", value="1", readonly, data-i18n-title="MAXIMUM_EFFORT_DESC").center
			.grey-box.ai-processing-nodes
				h3(data-i18n="PROCESSING_NODES") Processing Nodes
				.table-header.nodes-grid.rep-grid
					.connected(data-i18n="CONNECTED?")
					.value(data-i18n="PROCESSING")
					.location(data-i18n="LOCATION")
				fieldset.repeating_processing-nodes
					.nodes-grid.rep-grid
						+fake-text-input().center
							input(type="checkbox" value="1" name="attr_node_connected")
						+text-input("node_value")(type="number" value="0")
						+text-input("node_location")
		.column
			.routines.grey-box.simple-repsection
				.flex-center
					h3(data-i18n="AI_ROUTINES") AI Routines
				fieldset.repeating_routines
					.show-chevron
						+collapseChevron
						button.display.invisible-button(name="roll_Routine", type="roll", value!="&{template:swn-default} {{charname=@{character_name}}} {{info=^{AI_ROUTINE}}} {{title=@{routine_name}}} {{desc=@{routine_description}}}")
						.display
							.name.flex
								span(name="attr_routine_name")
							.details #[span(name="attr_routine_description")]
						.edit.flex-wrap
							input.name.grow(type="text", name="attr_routine_name", data-i18n-placeholder="ROUTINE")
							textarea.details(name="attr_routine_description", data-i18n-placeholder="DESCRIPTION")

//- Gear
.section.cols-2
	+sectionheader("show_gear", "GEAR")
	.gear.halfgrid
		.equipment.column
			.grey-box.readied-stowed.flex-center
				h3(data-i18n="EQUIPMENT")
				input(type="hidden", name="attr_gear_readied_over", value="0").input-gear-over
				+text-input-duo("gear_readied", "gear_readied_max", "READIED", {value: "5", readonly: true, "data-i18n-title": "STRENGTH/2"})(value="0", readonly)
				input(type="hidden", name="attr_gear_stowed_over", value="0").input-gear-over
				+text-input-duo("gear_stowed", "gear_stowed_max", "STOWED", {value: "10", readonly: true, "data-i18n-title": "STRENGTH"})(value="0", readonly)
				+text-input("credits", "CREDITS")(value="0", min="0", type="number").center
				+text-input("credits_owed", "CREDITS_OWED")(value="0", min="0", type="number").center
			.grey-box
				.table-header.gear-grid.rep-grid
					.amount #
					.name(data-i18n="NAME")
					.details(data-i18n="DESCRIPTION")
					.enc(data-i18n="ENCUMBRANCE_SHORT" data-i18n-title="ENCUMBRANCE")
					.status(data-i18n="STATUS")
					.bundled(data-i18n="BUNDLED")
						Bundled
				fieldset.repeating_weapons
					input(type="hidden", name="attr_weapon_encumbrance", value="0").hider
					.gear-grid.rep-grid
						.amount
						+text-input("weapon_name")(readonly)
						+fake-text-input()
							textarea(name="attr_weapon_description")
						+text-input("weapon_encumbrance")(type="number", value="0").center
						+fake-text-input()
							select.status(name="attr_weapon_status")
								option(value="", data-i18n="OTHER", selected)
								option(value="READIED", data-i18n="READIED")
								option(value="STOWED", data-i18n="STOWED")
				fieldset.repeating_gear
					.gear-grid.rep-grid
						+text-input("gear_amount")(type="number", value="1", min="0")
						+text-input("gear_name")(data-i18n-placeholder="ITEM")
						+fake-text-input()
							textarea(name="attr_gear_description")
						+text-input("gear_encumbrance")(type="number", value="0", step="any").center
						+fake-text-input()
							select.status(name="attr_gear_status")
								option(value="", data-i18n="OTHER", selected)
								option(value="READIED", data-i18n="READIED")
								option(value="STOWED", data-i18n="STOWED")
						+fake-text-input()
							input(name="attr_gear_bundled" type="checkbox" value="on")
			.grey-box.other
				h3(data-i18n="OTHER_EQUIPMENT")
				textarea(name="attr_gear_other").other-gear
		.column
			.armor.grey-box
				.flex-center
					h3
						| #[span(data-i18n="ARMOR")] – #[span(data-i18n="AC")] #[span(name="attr_AC")]
				.table-header.armor-grid.rep-grid
					.active.center(data-i18n="ACTIVE?")
					.name(data-i18n="NAME")
					.ac(data-i18n="AC")
					.type(data-i18n="TYPE")
					.enc(data-i18n="ENCUMBRANCE_SHORT")
					.enc-bonus(data-i18n="+STR")
					.status(data-i18n="STATUS")
				.armor-grid.rep-grid.edit
					+text-input("innate_ac_name")(value="Innate AC", data-i18n="INNATE_AC").col-2
					+text-input("innate_ac")(type="number", value="10").center
				input(type="hidden", name="attr_show_armor_details", value="1").input-details
				fieldset.repeating_armor
					.armor-grid.rep-grid
						+fake-text-input().center
							input(type="checkbox", name="attr_armor_active", value="1")
						+text-input("armor_name")
						+text-input("armor_ac")(type="number", value="0").center
						+fake-text-input()
							select(name="attr_armor_type")
								option(value="none", data-i18n="NONE")
								each val in armorTypes
									- const selected = val === "STREET";
									option(value=val, data-i18n=val selected=selected)
						+text-input("armor_encumbrance")(type="number", value="0").center
						+text-input("armor_encumbrance_bonus")(type="number", value="0").center
						+fake-text-input()
							select(name="attr_armor_status")
								option(value="", data-i18n="OTHER", selected)
								each val in armorStatus
									option(value=val, data-i18n=val)
					input(type="hidden", name="attr_armor_description", value="").hide-empty
					.armor-grid.rep-grid.details
						.display
							span(name="attr_armor_description")
						+fake-text-input().edit
							textarea(name="attr_armor_description")
			.cyberware.simple-repsection.grey-box
				.flex-center
					h3
						| #[span(data-i18n="CYBERWARE")] – #[span(data-i18n="TOTAL_CYBERWARE_STRAIN")] #[span(name="attr_cyberware_strain_total")]
				fieldset.repeating_cyberware
					.show-chevron
						+collapseChevron
						button.display.invisible-button(name="roll_Cyberware", type="roll", value!="&{template:swn-default} {{charname=@{character_name}}} {{title=@{cyberware_name}}} {{info=^{CYBERWARE}; @{cyberware_strain} ^{STRAIN}}} {{desc=@{cyberware_description}}}")
						.display
							.name.flex-between
								span(name="attr_cyberware_name")
								span #[span(name="attr_cyberware_strain")] #[span(data-i18n="STRAIN").lower]
							.details #[span(name="attr_cyberware_description")]
						.edit.flex-center
							input(type="text", name="attr_cyberware_name").name
							span #[span(data-i18n="STRAIN_COST")]:
							input(type="number", name="attr_cyberware_strain", value="0").strain
							textarea(name="attr_cyberware_description", data-i18n-placeholder="DESCRIPTION").details

//- Misc
.section.cols-2
	+sectionheader("show_misc", "MISCELLANEOUS")
	.misc
		.thirdsgrid.repeating-flex-row
			.goals.grey-box.cols-2
				h3(data-i18n="GOALS")
				fieldset.repeating_goals
					.flex
						+text-input("goal_name").name.grow
						+text-input("goal_xp")(type="number", min="0", data-i18n-placeholder="XP").xp.center
			.languages.grey-box
				h3(data-i18n="LANGUAGES")
				fieldset.repeating_languages
					+text-input("language")
		.halfgrid.notes
			textarea(name="attr_notes", data-i18n-placeholder="NOTES")
			textarea(name="attr_other_notes", data-i18n-placeholder="NOTES")
